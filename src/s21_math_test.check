#include <stdio.h>
#include <stdlib.h>
#include <float.h>
#include <math.h>
#include "s21_math.h"
#define DIFF pow(10, -7)

#test s21_abs_1
ck_assert_int_eq(abs(5), s21_abs(5));
ck_assert_int_eq(abs(0), s21_abs(0));
ck_assert_int_eq(abs(-8), s21_abs(-8));

#test s21_fabs_1
ck_assert_ldouble_eq(fabs(5.0), s21_fabs(5.0));
ck_assert_ldouble_eq(fabs(0.0), s21_fabs(0.0));
ck_assert_ldouble_eq(fabs(-8.0), s21_fabs(-8.0));
ck_assert_ldouble_eq(fabs(4321.23456), s21_fabs(4321.23456));
ck_assert_ldouble_eq(fabs(-0.23456), s21_fabs(-0.23456));
ck_assert_ldouble_eq(fabs(S21_NEGATIVE_INF), s21_fabs(S21_NEGATIVE_INF));
ck_assert_ldouble_eq(fabs(S21_POSITIVE_INF), s21_fabs(S21_POSITIVE_INF));
ck_assert_int_eq(fabs(S21_NAN), s21_fabs(S21_NAN));

#test s21_exp_1
ck_assert_float_eq(exp(5.0), s21_exp(5.0));
ck_assert_float_eq(exp(s21_MAX_double), s21_exp(s21_MAX_double));
ck_assert_float_eq(exp(0.000001), s21_exp(0.000001));
ck_assert_float_eq(exp(-5.0), s21_exp(-5.0));
ck_assert_float_eq(exp(-s21_MAX_double), s21_exp(-s21_MAX_double));
ck_assert_float_eq(exp(-0.000001), s21_exp(-0.000001));
ck_assert_float_eq(exp(S21_POSITIVE_INF), s21_exp(S21_POSITIVE_INF));
ck_assert_float_eq(exp(S21_NEGATIVE_INF), s21_exp(S21_NEGATIVE_INF));
ck_assert_float_eq(exp(2147483647.999998), s21_exp(2147483647.999998));
ck_assert_float_eq(exp(-2147483647.999998), s21_exp(-2147483647.999998));
ck_assert_int_eq(is_nan(exp(S21_NAN)), is_nan(s21_exp(S21_NAN)));
ck_assert_ldouble_nan(exp(S21_NAN));
ck_assert_ldouble_nan(s21_exp(S21_NAN));

#test s21_fmod_1
ck_assert_double_eq(fmod(0, 1), s21_fmod(0, 1));

#test s21_fmod_3
ck_assert_double_nan(s21_fmod(S21_POSITIVE_INF, -1));

#test s21_fmod_4
ck_assert_double_eq(fmod(-1, S21_NEGATIVE_INF), s21_fmod(-1, S21_NEGATIVE_INF));

#test s21_fmod_5
ck_assert_double_eq(fmod(0, S21_NEGATIVE_INF), s21_fmod(0, S21_NEGATIVE_INF));

#test s21_fmod_6
ck_assert_double_nan(s21_fmod(0, S21_NAN));

#test s21_fmod_7
ck_assert_double_nan(s21_fmod(S21_NAN, S21_POSITIVE_INF));

#test s21_fmod_8
ck_assert_double_nan(s21_fmod(S21_POSITIVE_INF, S21_NAN));

#test s21_fmod_9
ck_assert_double_nan(s21_fmod(S21_NAN, S21_NEGATIVE_INF));

#test s21_fmod_10
ck_assert_double_nan(s21_fmod(1, 0));

#test s21_fmod_11
ck_assert_double_eq(fmod(-25.678, 7), s21_fmod(-25.678, 7));

#test s21_fmod_12
ck_assert_double_eq(fmod(25.678, -7), s21_fmod(25.678, -7));

#test s21_fmod_13
ck_assert_double_eq(fmod(s21_MAX_double, 56), s21_fmod(s21_MAX_double, 56));

#test s21_fmod_14
ck_assert_double_eq_tol(fmod(1000000000, S21_EPS),
                        s21_fmod(1000000000, S21_EPS), 1e-6);

#test s21_fmod_15
ck_assert_double_eq(fmod(2.34, 2.0), s21_fmod(2.34, 2.0));

#test s21_fmod_16
ck_assert_double_eq(fmod(2.34, -2.0), s21_fmod(2.34, -2.0));

#test s21_fmod_17
ck_assert_double_eq(fmod(S21_EPS, 2.0), s21_fmod(S21_EPS, 2.0));

#test s21_fmod_18
ck_assert_double_eq_tol(fmod(100000, S21_EPS),
                        s21_fmod(100000, S21_EPS), 1e-6);

#test s21_fmod_19
ck_assert_double_eq_tol(fmod(999999, S21_EPS),
                        s21_fmod(999999, S21_EPS), 1e-6);

#test s21_fmod_20
ck_assert_double_eq_tol(fmod(S21_EPS, 999999),
                        s21_fmod(S21_EPS, 999999), 1e-6);

#test floorTest1
long double res = floor(0.0);
long double s21_res = s21_floor(0.0);
ck_assert_ldouble_eq_tol(res, s21_res, 1e-06);

#test floorTest2
long double res = floor(10);
long double s21_res = s21_floor(10);
ck_assert_ldouble_eq_tol(res, s21_res, 1e-06);

#test floorTest3
long double res = floor(-100);
long double s21_res = s21_floor(-100);
ck_assert_ldouble_eq_tol(res, s21_res, 1e-06);

#test floorTest4
long double res = floor(-100.7865);
long double s21_res = s21_floor(-100.7865);
ck_assert_ldouble_eq_tol(res, s21_res, 1e-06);

#test floorTest5
long double res = floor(100.7865);
long double s21_res = s21_floor(100.7865);
ck_assert_ldouble_eq_tol(res, s21_res, 1e-06);

#test floorTest6
long double res = floor(S21_POSITIVE_INF);
long double s21_res = s21_floor(S21_POSITIVE_INF);
ck_assert_ldouble_eq(res, s21_res);

#test floorTest7
long double res = floor(S21_NEGATIVE_INF);
long double s21_res = s21_floor(S21_NEGATIVE_INF);
ck_assert_ldouble_eq(res, s21_res);

#test floorTest8
long double res = floor(-100.3865);
long double s21_res = s21_floor(-100.3865);
ck_assert_ldouble_eq_tol(res, s21_res, 1e-06);

#test floorTest9
long double res = floor(100.3865);
long double s21_res = s21_floor(100.3865);
ck_assert_ldouble_eq_tol(res, s21_res, 1e-06);

#test floorTest10
long double s21_res = s21_floor(S21_NAN);
ck_assert_ldouble_nan(s21_res);

#test-loop(1, 86) s21_log_1
long double b = s21_log(-0.01 + (_i * 123));
long double a = log(-0.01 + (_i * 123));
ck_assert_double_eq_tol(a, b, 1e-06);

#test-loop(1, 86) s21_log_2
long double b = s21_log(0.1 * _i * 5);
long double a = log(0.1 * _i * 5);
ck_assert_double_eq_tol(a, b, 1e-6);

#test s21_log_3
ck_assert_double_eq(log(S21_POSITIVE_INF), s21_log(S21_POSITIVE_INF));

#test s21_log_4
ck_assert_float_nan(s21_log(S21_NEGATIVE_INF));

#test s21_log_7
ck_assert_double_eq(log(1), s21_log(1));

#test s21_log_8
ck_assert_float_nan(s21_log(NAN));

#test s21_log_10
ck_assert_double_eq(log(S21_EPS), s21_log(S21_EPS));

#test s21_log_11
ck_assert_double_eq(log(0), s21_log(0));

#test pow_1
double num = 456.789;
double ex = 1.1;
long double orig_res = pow(num, ex), our_res = s21_pow(num, ex);
int suc = 0;
ck_assert_float_eq(our_res, orig_res);
if ((fabsl(orig_res - our_res) <= 1e-6)) suc = 1;
ck_assert_int_eq(1, suc);

#test pow_2
double num = S21_POSITIVE_INF;
double ex = 1.1;
long double orig_res = pow(num, ex), our_res = s21_pow(num, ex);
int suc = 0;
if (is_inf(our_res) && is_inf(orig_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test pow_3
double num =S21_NAN;
double ex = 1.1;
long double orig_res = pow(num, ex), our_res = s21_pow(num, ex);
int suc = 0;
if (is_nan(our_res) && is_nan(orig_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test pow_4
double num =S21_NAN;
double ex =S21_NAN;
long double orig_res = pow(num, ex), our_res = s21_pow(num, ex);
int suc = 0;
if (is_nan(our_res) && is_nan(orig_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test pow_5
double num = 0.001;
double ex = S21_NAN;
long double orig_res = pow(num, ex), our_res = s21_pow(num, ex);
int suc = 0;
if (is_nan(our_res) && is_nan(orig_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test pow_6
double num = S21_POSITIVE_INF;
double ex = S21_POSITIVE_INF;
long double orig_res = pow(num, ex), our_res = s21_pow(num, ex);
int suc = 0;
if (is_inf(our_res) && is_inf(orig_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test pow_7
double num = S21_POSITIVE_INF;
double ex = S21_POSITIVE_INF;
long double orig_res = pow(num, ex), our_res = s21_pow(num, ex);
int suc = 0;
if (is_inf(our_res) && is_inf(orig_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test pow_9
long double base = -10.1261;
long double exp = -0.72;
ck_assert_double_nan(s21_pow(base, exp));
ck_assert_double_nan(pow(base, exp));

#test pow_10
long double base = +0;
long double exp = -0.33;
ck_assert_ldouble_infinite(s21_pow(base, exp));
ck_assert_ldouble_infinite(pow(base, exp));

#test pow_12
long double base = -0;
long double exp = -0.33;
ck_assert_ldouble_infinite(s21_pow(base, exp));
ck_assert_ldouble_infinite(pow(base, exp));

#test pow_13
long double base = -0;
long double exp = S21_POSITIVE_INF;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), S21_EPS);

#test pow_14
long double base = +0;
long double exp = 123;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test pow_15
long double base = -0;
long double exp = 123;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test pow_16
long double base = -0;
long double exp = S21_POSITIVE_INF;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test pow_17
long double base = -1;
long double exp = S21_POSITIVE_INF;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test pow_18
long double base = -1;
long double exp = S21_NAN;
ck_assert_double_nan(pow(base, exp));
ck_assert_double_nan(s21_pow(base, exp));

#test pow_19
long double base = S21_NAN;
long double exp = 0;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test pow_20
long double base = -123;
long double exp = S21_NAN;
ck_assert_double_nan(s21_pow(base, exp));
ck_assert_double_nan(pow(base, exp));

#test pow_21
long double base = 0.5591951;
long double exp = S21_NEGATIVE_INF;
ck_assert_ldouble_infinite(pow(base, exp));
ck_assert_ldouble_infinite(s21_pow(base, exp));

#test pow_22
long double base = 1.5591951;
long double exp = S21_NEGATIVE_INF;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test pow_23
long double base = 0.5591951;
long double exp = S21_POSITIVE_INF;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test pow_24
long double base = 1.5591951;
long double exp = S21_NEGATIVE_INF;
ck_assert_ldouble_eq(s21_pow(base, exp), pow(base, exp));

#test pow_25
long double base = S21_NEGATIVE_INF;
long double exp = -193491;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test pow_26
long double base = S21_NEGATIVE_INF;
long double exp = -142;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test pow_27
long double base = S21_NEGATIVE_INF;
long double exp = 141;
ck_assert_ldouble_infinite(s21_pow(base, exp));
ck_assert_ldouble_infinite(pow(base, exp));

#test pow_28
long double base = S21_NEGATIVE_INF;
long double exp = 142;
ck_assert_ldouble_infinite(s21_pow(base, exp));
ck_assert_ldouble_infinite(pow(base, exp));

#test pow_29
long double base = S21_POSITIVE_INF;
long double exp = -1;
ck_assert_ldouble_eq_tol(s21_pow(base, exp), pow(base, exp), 1e-6);

#test pow_30
long double base = S21_POSITIVE_INF;
long double exp = 1;
ck_assert_ldouble_infinite(s21_pow(base, exp));
ck_assert_ldouble_infinite(pow(base, exp));

#test pow_31
ck_assert_ldouble_eq_tol(s21_pow(0.0, 0.0), pow(0.0, 0.0), 1e-6);

#test pow_32
ck_assert_ldouble_eq_tol(s21_pow(-1, 4), pow(-1, 4), 1e-6);

#test pow_33
ck_assert_ldouble_eq_tol(s21_pow(2, 18), pow(2, 18), 1e-6);

#test pow_34
ck_assert_ldouble_eq_tol(s21_pow(2.1, 11), pow(2.1, 11), 1e-6);

#test pow_35
ck_assert_ldouble_eq_tol(s21_pow(1.23456e-7, 2.21), pow(1.23456e-7, 2.21),1e-6);

#test pow_36
ck_assert_ldouble_eq_tol(s21_pow(2.1234567, -2), pow(2.1234567, -2), 1e-6);

#test pow_37
ck_assert_ldouble_eq_tol(s21_pow(2.1234567, -2), pow(2.1234567, -2), 1e-6);

#test pow_38
long double orig_res = pow(2.1234567e-7, -2.45e4),
our_res = s21_pow(2.1234567e-7, -2.45e4);
int suc = 0;
if (is_inf(our_res) && is_inf(orig_res)) suc = 1;
ck_assert_int_eq(1, suc);

#test pow_39
ck_assert_ldouble_eq_tol(s21_pow(9.99999999e3, 9.95e-4),
pow(9.99999999e3, 9.95e-4), 1e-6);

#test pow_40
long double exp = -12;
ck_assert_ldouble_infinite(s21_pow(+0, exp));
ck_assert_ldouble_infinite(pow(+0, exp));

#test pow_41
long double exp = -12;
ck_assert_ldouble_infinite(s21_pow(-0, exp));
ck_assert_ldouble_infinite(pow(-0, exp));

#test pow_42
long double exp = 0;
ck_assert_ldouble_eq_tol(s21_pow(-0, exp), pow(-0, exp), 1e-6);

#test pow_43
long double exp = S21_POSITIVE_INF;
ck_assert_ldouble_eq_tol(s21_pow(+0, exp), pow(+0, exp), 1e-6);

#test pow_44
long double exp = 2.456;
ck_assert_ldouble_eq_tol(s21_pow(+0, exp), pow(+0, exp), 1e-6);

#test pow_45
long double exp = S21_NEGATIVE_INF;
ck_assert_ldouble_infinite(s21_pow(+0, exp));
ck_assert_ldouble_infinite(pow(+0, exp));

#test pow_46
long double exp = 56;
ck_assert_ldouble_eq_tol(s21_pow(+0, exp), pow(+0, exp), 1e-6);

#test pow_47
long double exp = 56;
ck_assert_ldouble_eq_tol(s21_pow(-0, exp), pow(-0, exp), 1e-6);

#test pow_48
long double exp = 56.345;
ck_assert_ldouble_eq_tol(s21_pow(-0, exp), pow(-0, exp), 1e-6);

#test pow_49
long double exp = S21_POSITIVE_INF;
ck_assert_ldouble_eq_tol(s21_pow(-1, exp), pow(-1, exp), 1e-6);

#test pow_50
long double exp = S21_NEGATIVE_INF;
ck_assert_ldouble_eq_tol(s21_pow(-1, exp), pow(-1, exp), 1e-6);

#test pow_51
long double exp = S21_NAN;
ck_assert_ldouble_eq_tol(s21_pow(+1, exp), pow(+1, exp), 1e-6);

#test pow_52
long double exp = -0;
ck_assert_ldouble_eq_tol(s21_pow(4567, exp), pow(4567, exp), 1e-6);

#test pow_53
long double exp = +0;
ck_assert_ldouble_eq_tol(s21_pow(34567, exp), pow(34567, exp), 1e-6);

#test pow_54
long double exp = -0;
ck_assert_ldouble_eq_tol(s21_pow(S21_NAN, exp), pow(S21_NAN, exp), 1e-6);

#test pow_55
long double exp = +0;
ck_assert_ldouble_eq_tol(s21_pow(S21_NAN, exp), pow(S21_NAN, exp), 1e-6);

#test pow_56
long double exp = S21_NAN;
ck_assert_double_nan(s21_pow(S21_NAN, exp));
ck_assert_double_nan(pow(S21_NAN, exp));

#test pow_57
long double exp = S21_POSITIVE_INF;
ck_assert_ldouble_infinite(s21_pow(S21_POSITIVE_INF, exp));
ck_assert_ldouble_infinite(pow(S21_POSITIVE_INF, exp));

#test pow_58
long double exp = S21_NEGATIVE_INF;
ck_assert_ldouble_eq_tol(s21_pow(S21_NEGATIVE_INF, exp), pow(S21_NEGATIVE_INF, exp), 1e-6);

#test pow_59
double exp = S21_POSITIVE_INF;
ck_assert_ldouble_infinite(s21_pow(S21_NEGATIVE_INF, exp));
ck_assert_ldouble_infinite(pow(S21_NEGATIVE_INF, exp));

#test pow_60
double exp;
double res1;
long double res2;
for (exp = 0.0; exp > -1000; exp -= 0.1) {
    res1 = pow(S21_POSITIVE_INF, exp);
    res2 = s21_pow(S21_POSITIVE_INF, exp);
}
ck_assert_ldouble_eq_tol(res1, res2, 1e-6);

#test pow_61
double base;
double res1;
long double res2;
for (base = 0.0; base < 10; base += 0.1) {
    res1 = pow(base, S21_POSITIVE_INF);
    res2 = s21_pow(base, S21_POSITIVE_INF);
}
ck_assert_ldouble_infinite(res1);
ck_assert_ldouble_infinite(res2);

#test pow_62
double base;
double res1;
long double res2;
for (base = 0.0; base > -10; base -= 0.1) {
    res1 = pow(base, S21_POSITIVE_INF);
    res2 = s21_pow(base, S21_POSITIVE_INF);
}
ck_assert_ldouble_infinite(res1);
ck_assert_ldouble_infinite(res2);

#test pow_63
long double base;
long double res1;
long double res2;
for (base = 0.0; base < 10; base += 0.1) {
    res1 = pow(base, S21_NEGATIVE_INF);
    res2 = s21_pow(base, S21_NEGATIVE_INF);
}
ck_assert_ldouble_eq_tol(res1, res2, 1e-6);

#test pow_64
long double base;
long double res1;
long double res2;
for (base = 0.0; base > -10; base -= 0.1) {
    res1 = pow(base, S21_NEGATIVE_INF);
    res2 = s21_pow(base, S21_NEGATIVE_INF);
}
ck_assert_ldouble_eq_tol(res1, res2, 1e-6);

#test pow_65
double exp;
double res1;
long double res2;
for (exp = 0.0; exp > -10; exp -= 0.1) {
    if (fmod(exp, 2) != 0) {
        res1 = pow(S21_NEGATIVE_INF, exp);
        res2 = s21_pow(S21_NEGATIVE_INF, exp);
    }
}
ck_assert_ldouble_eq_tol(res1, res2, 1e-6);

#test pow_66
double exp;
double res1;
long double res2;
for (exp = 0.0; exp > -10; exp -= 0.1) {
    if (fmod(exp, 2) == 0) {
        res1 = pow(S21_NEGATIVE_INF, exp);
        res2 = s21_pow(S21_NEGATIVE_INF, exp);
    }
}
ck_assert_ldouble_eq_tol(res1, res2, 1e-6);

#test pow_67
double exp;
double res1;
long double res2;
for (exp = 0.0; exp < 10; exp += 0.1) {
    if (fmod(exp, 2) != 0) {
        res1 = pow(S21_NEGATIVE_INF, exp);
        res2 = s21_pow(S21_NEGATIVE_INF, exp);
    }
}
ck_assert_ldouble_infinite(res1);
ck_assert_ldouble_infinite(res2);

#test pow_68
double exp;
double res1;
long double res2;
for (exp = 0.0; exp < 10; exp += 0.1) {
    if (fmod(exp, 2) == 0) {
        res1 = pow(S21_NEGATIVE_INF, exp);
        res2 = s21_pow(S21_NEGATIVE_INF, exp);
    }
}
ck_assert_ldouble_eq_tol(res2, res1, 1e-6);

#test pow_69
long double exp = 3;
ck_assert_ldouble_eq_tol(s21_pow(-3, exp), pow(-3, exp), 1e-6);

#test pow_70
long double exp = -3;
ck_assert_ldouble_eq_tol(s21_pow(-3, exp), pow(-3, exp), 1e-6);

#test pow_71
long double exp = -3;
ck_assert_ldouble_eq_tol(s21_pow(3, exp), pow(3, exp), 1e-6);

#test pow_72
long double exp = 3;
ck_assert_ldouble_eq_tol(s21_pow(3, exp), pow(3, exp), 1e-6);

#test pow_73
long double base = -0;
long double exp = S21_POSITIVE_INF;
long double res = pow(base, exp);
long double res1 = s21_pow(base, exp);
ck_assert_ldouble_eq_tol(res, res1, 1e-6);

#test pow_74
long double exp;
long double base = -0;
long double res;
long double res1;
for (exp = 0.0; exp < 10; exp += 0.1) {
    if (fmod(exp, 2) != 0) {
        res = pow(base, exp);
        res1 = s21_pow(base, exp);
    }
}
ck_assert_ldouble_eq_tol(res, res1, 1e-6);

#test s21_pow_21
ck_assert_double_eq(pow(-1, 1), s21_pow(-1, 1));

#test s21_pow_22
ck_assert_double_eq(pow(-1, -1), s21_pow(-1, -1));

#test s21_pow_23
ck_assert_double_eq(pow(1, 0), s21_pow(1, 0));

#test s21_pow_24
ck_assert_double_eq(pow(0, 1), s21_pow(0, 1));

#test s21_pow_25
ck_assert_double_nan(pow(-1, S21_NAN));
ck_assert_double_nan(s21_pow(-1, S21_NAN));

#test s21_pow_26
ck_assert_double_nan(pow(NAN, -1));
ck_assert_double_nan(s21_pow(NAN, -1));

#test s21_pow_27
ck_assert_double_eq(pow(-1, S21_POSITIVE_INF), s21_pow(-1, S21_POSITIVE_INF));

#test s21_pow_28
ck_assert_double_eq(pow(S21_POSITIVE_INF, -1), s21_pow(S21_POSITIVE_INF, -1));

#test s21_pow_29
ck_assert_double_eq(pow(0, S21_NEGATIVE_INF), s21_pow(0, S21_NEGATIVE_INF));

#test s21_pow_30
ck_assert_double_nan(pow(NAN, 1));
ck_assert_double_nan(s21_pow(NAN, 1));

#test s21_pow_31
ck_assert_double_eq(pow(1,S21_NAN), s21_pow(1,S21_NAN)); 
#test s21_pow_32
ck_assert_double_eq(pow(S21_POSITIVE_INF, 1), s21_pow(S21_POSITIVE_INF, 1));

#test s21_pow_33
ck_assert_double_eq(pow(S21_NEGATIVE_INF, 1), s21_pow(S21_NEGATIVE_INF, 1));

#test s21_pow_34
ck_assert_double_eq(pow(1, S21_NEGATIVE_INF), s21_pow(1, S21_NEGATIVE_INF));

#test s21_pow_35
ck_assert_double_nan(pow(-2,S21_NAN));
ck_assert_double_nan(s21_pow(-2,S21_NAN));

#test s21_pow_36
ck_assert_double_eq(pow(S21_NEGATIVE_INF, 5), s21_pow(S21_NEGATIVE_INF, 5));

#test s21_pow_37
ck_assert_double_eq(pow(-5, S21_POSITIVE_INF), s21_pow(-5, S21_POSITIVE_INF));

#test s21_pow_38
ck_assert_double_eq(pow(0.2, S21_POSITIVE_INF), s21_pow(0.2, S21_POSITIVE_INF));

#test s21_pow_39
ck_assert_double_eq(pow(S21_POSITIVE_INF, S21_POSITIVE_INF), s21_pow(S21_POSITIVE_INF, S21_POSITIVE_INF));

#test s21_pow_40
ck_assert_double_eq(pow(S21_POSITIVE_INF, S21_NEGATIVE_INF), s21_pow(S21_POSITIVE_INF, S21_NEGATIVE_INF));

#test ceill_1
long double num = -148.803949;
if (is_nan((double)(s21_ceil(num)))) {
  ck_assert_int_eq((is_nan(ceill(num)) != 0), 1);
} else {
  long double condition = (s21_ceil(num) - ceill(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test ceill_2
long double num = 1;
if (is_nan((double)(s21_ceil(num)))) {
  ck_assert_int_eq((is_nan(ceill(num)) != 0), 1);
} else {
  long double condition = (s21_ceil(num) - ceill(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test ceill_3
long double num = -534.577388;
if (is_nan((double)(s21_ceil(num)))) {
  ck_assert_int_eq((is_nan(ceill(num)) != 0), 1);
} else {
  long double condition = (s21_ceil(num) - ceill(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test ceill_4
long double num = -642.161791;
if (is_nan((double)(s21_ceil(num)))) {
  ck_assert_int_eq((is_nan(ceill(num)) != 0), 1);
} else {
  long double condition = (s21_ceil(num) - ceill(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test ceill_5
long double num = -813.222114;
if (is_nan((double)(s21_ceil(num)))) {
  ck_assert_int_eq((is_nan(ceill(num)) != 0), 1);
} else {
  long double condition = (s21_ceil(num) - ceill(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test ceill_6
long double num = 175.931519;
if (is_nan((double)(s21_ceil(num)))) {
  ck_assert_int_eq((is_nan(ceill(num)) != 0), 1);
} else {
  long double condition = (s21_ceil(num) - ceill(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test ceill_7
long double num = 881.031659;
if (is_nan((double)(s21_ceil(num)))) {
  ck_assert_int_eq((is_nan(ceill(num)) != 0), 1);
} else {
  long double condition = (s21_ceil(num) - ceill(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test ceill_8
long double num = -500.900862;
if (is_nan((double)(s21_ceil(num)))) {
  ck_assert_int_eq((is_nan(ceill(num)) != 0), 1);
} else {
  long double condition = (s21_ceil(num) - ceill(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test ceill_9
long double num = -640.780487;
if (is_nan((double)(s21_ceil(num)))) {
  ck_assert_int_eq((is_nan(ceill(num)) != 0), 1);
} else {
  long double condition = (s21_ceil(num) - ceill(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test ceill_10
long double num = 402.356159;
if (is_nan((double)(s21_ceil(num)))) {
  ck_assert_int_eq((is_nan(ceill(num)) != 0), 1);
} else {
  long double condition = (s21_ceil(num) - ceill(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test ceill_nan
long double num =S21_NAN;
if (is_nan((double)(s21_ceil(num)))) {
  ck_assert_int_eq((is_nan(ceill(num)) != 0), 1);
} else {
  long double condition = (s21_ceil(num) - ceill(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}
ck_assert_double_nan(s21_ceil(num));
ck_assert_double_nan(ceil(num));

#test ceill_inf
long double num = S21_POSITIVE_INF;
if (is_nan((double)(s21_ceil(num)))) {
  ck_assert_int_eq((is_nan(ceill(num)) != 0), 1);
} else if (is_inf((double)(s21_ceil(num)))) {
  ck_assert_int_eq((is_inf(ceill(num)) != 0), 1);
} else {
  long double condition = (s21_ceil(num) - ceill(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}
ck_assert_ldouble_infinite(s21_ceil(num));
ck_assert_ldouble_infinite(ceil(num));

#test ceill_neg_inf
long double num = S21_NEGATIVE_INF;
if (is_nan((double)(s21_ceil(num)))) {
  ck_assert_int_eq((is_nan(ceill(num)) != 0), 1);
} else if (is_inf((double)(s21_ceil(num)))) {
  ck_assert_int_eq((is_inf(ceill(num)) != 0), 1);
} else {
  long double condition = (s21_ceil(num) - ceill(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}
ck_assert_ldouble_infinite(s21_ceil(num));
ck_assert_ldouble_infinite(ceil(num));

#test cos_1
long double num = -300791.155215;
ck_assert_ldouble_eq_tol(s21_cos(num), cos(num), 1e-6);

#test cos_2
long double num = -140005.698886;
long double condition = (s21_cos(num) - cos(num));
ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
ck_assert_ldouble_eq_tol(s21_cos(num), cos(num), 1e-6);


#test cos_3
long double num = 54317913.816511;
ck_assert_ldouble_eq_tol(s21_cos(num), cos(num), 1e-6);

#test cos_4
long double num = 12178608.097981;
ck_assert_ldouble_eq_tol(s21_cos(num), cos(num), 1e-6);

#test cos_5
long double num = -15200530.226901;
ck_assert_ldouble_eq_tol(s21_cos(num), cos(num), 1e-6);

#test cos_6_max
long double num = 53838880.999999001;
ck_assert_ldouble_eq_tol(s21_cos(num), cos(num), 1e-6);


#test cos_7_min
long double num = -53838880.999999001;
ck_assert_ldouble_eq_tol(s21_cos(num), cos(num), 1e-6);

#test cos_nan
long double num = S21_NAN;
ck_assert_ldouble_nan(s21_cos(num));
ck_assert_ldouble_nan(cos(num));


#test cos_inf
long double num = S21_POSITIVE_INF;
ck_assert_ldouble_nan(s21_cos(num));
ck_assert_ldouble_nan(cos(num));

#test cos_neg_inf
long double num = S21_NEGATIVE_INF;
ck_assert_ldouble_nan(s21_cos(num));
ck_assert_ldouble_nan(cos(num));

#test test_01_s21_sin
double x = 2.3;
ck_assert_double_eq_tol(s21_sin(x), sin(x), 1e-6);

#test test_02_s21_sin
ck_assert_double_eq_tol(s21_sin(0.0), sin(0), 1e-6);

#test test_03_s21_sin
ck_assert_double_eq_tol(s21_sin(1), sin(1), 1e-6);

#test test_04_s21_sin
ck_assert_ldouble_eq_tol(s21_sin(-1), sin(-1), 1e-6);

#test test_05_s21_sin
ck_assert_double_eq_tol(s21_sin(0.234234123), sin(0.234234123), 1e-6);

#test test_06_s21_sin
ck_assert_double_eq_tol(s21_sin(-0.99999), sin(-0.99999), 1e-6);

#test test_07_s21_sin
ck_assert_ldouble_nan(s21_sin(S21_NAN));
ck_assert_ldouble_nan(sin(S21_NAN));

#test test_08_s21_sin
ck_assert_ldouble_nan(s21_sin(S21_POSITIVE_INF));
ck_assert_ldouble_nan(sin(S21_POSITIVE_INF));


#test test_09_s21_sin
ck_assert_ldouble_nan(s21_sin(S21_NEGATIVE_INF));
ck_assert_ldouble_nan(sin(S21_NEGATIVE_INF));

#test test_10_s21_sin
ck_assert_double_eq_tol(s21_sin(S21_PI / 6), sin(S21_PI / 6), 1e-06);

#test test_11_s21_sin
ck_assert_double_eq_tol(s21_sin(S21_PI / 4), sin(S21_PI / 4), 1e-06);

#test test_11_s21_sin_pi_4
ck_assert_double_eq(s21_sin(S21_PI / 4), sin(S21_PI / 4));

#test test_12_s21_sin
ck_assert_double_eq_tol(s21_sin(S21_PI / 3), sin(S21_PI / 3), 1e-06);

#test test_12_s21_sin_pi_3
ck_assert_double_eq(s21_sin(S21_PI / 3), sin(S21_PI / 3));

#test test_13_s21_sin
ck_assert_double_eq_tol(s21_sin(S21_PI / 2), sin(S21_PI / 2), 1e-06);

#test test_13_s21_sin_pi_2
ck_assert_double_eq(s21_sin(S21_PI / 2), sin(S21_PI / 2));

#test test_14_s21_sin
ck_assert_double_eq_tol(s21_sin(3 * S21_PI / 2), sin(3 * S21_PI / 2), 1e-06);

#test test_15_s21_sin
ck_assert_double_eq_tol(s21_sin(2 * S21_PI), sin(2 * S21_PI), 1e-06);

#test test_16_s21_sin
ck_assert_double_eq_tol(s21_sin(-2 * S21_PI), sin(-2 * S21_PI), 1e-06);

#test test_17_s21_sin
ck_assert_double_eq_tol(s21_sin(-3 * S21_PI), sin(-3 * S21_PI), 1e-06);

#test test_18_s21_sin
ck_assert_double_eq_tol(s21_sin(324.532925199433), sin(324.532925199433), 1e-06);

#test test_19_s21_sin
ck_assert_double_eq_tol(s21_sin(-333.532925199433), sin(-333.532925199433), 1e-06);

#test test_20_s21_sin
ck_assert_double_eq_tol(s21_sin(-93845.532925199433), sin(-93845.532925199433), 1e-06);

#test test_21_s21_sin
ck_assert_double_eq_tol(s21_sin(-92313.123456789101219), sin(-92313.123456789101219), 1e-06);

#test test_22_s21_sin
ck_assert_double_eq_tol(s21_sin(-S21_PI), sin(-S21_PI), 1e-06);

#test test_23_s21_sin
ck_assert_double_eq_tol(s21_sin(30 * S21_PI), sin(30 * S21_PI), 1e-8);

#test test_24_s21_sin
ck_assert_double_eq_tol(s21_sin(30 * S21_PI), sin(30 * S21_PI), 1e-08);

#test test_25_s21_sin
ck_assert_double_eq_tol(s21_sin(S21_PI), sin(S21_PI), 1e-08);

#test test_26_s21_sin
ck_assert_double_eq_tol(s21_sin(-300712.1552), sin(-300712.1552), 1e-06);

#test test_27_s21_sin
ck_assert_double_eq_tol(s21_sin(-3007191.155215), sin(-3007191.155215), 1e-06);

#test test_28_s21_sin
ck_assert_double_eq_tol(s21_sin(-30071291.155215), sin(-30071291.155215), 1e-06);

#test test_28_s21_sin_zero
ck_assert_double_eq(s21_sin(0), sin(0));

#test test_01_s21_tan
ck_assert_float_eq(s21_tan(-15.01), tan(-15.01));

#test test_02_s21_tan
double x = 0.55;
ck_assert_double_eq_tol(s21_tan(x), tan(x), 1e-06);


#test test_03_s21_tan
double x = 0;
ck_assert_double_eq_tol(s21_tan(x), tan(x), 1e-06);


#test test_04_s21_tan
ck_assert_ldouble_nan(s21_tan(S21_NEGATIVE_INF));
ck_assert_ldouble_nan(tan(S21_NEGATIVE_INF));

#test test_05_s21_tan
ck_assert_ldouble_nan(s21_tan(S21_POSITIVE_INF));
ck_assert_ldouble_nan(tan(S21_POSITIVE_INF));

#test test_06_s21_tan
ck_assert_ldouble_nan(s21_tan(S21_NAN));
ck_assert_ldouble_nan(tan(S21_NAN));

#test test_07_s21_tan
ck_assert_double_eq_tol(s21_tan(0.0), tan(0.0), 1e-06);

#test test_08_s21_tan
ck_assert_double_eq_tol(s21_tan(S21_PI / 6), tan(S21_PI / 6), 1e-06);

#test test_09_s21_tan
ck_assert_double_eq_tol(s21_tan(S21_PI / 4), tan(S21_PI / 4), 1e-06);

#test test_10_s21_tan
ck_assert_double_eq_tol(s21_tan(-2 * S21_PI), tan(-2 * S21_PI), 1e-06);

#test test_11_s21_tan
ck_assert_double_eq_tol(s21_tan(S21_PI), tan(S21_PI), 1e-06);

#test test_12_s21_tan
ck_assert_double_eq_tol(s21_tan(S21_PI / 3), tan(S21_PI / 3), 1e-06);

#test test_13_s21_tan
ck_assert_double_eq_tol(s21_tan(3 * S21_PI / 3), tan(3 * S21_PI / 3), 1e-06);

#test test_14_s21_tan
double db = 4.88692191;
ck_assert_double_eq_tol(s21_tan(db), tan(db), 1e-06);

#test test_15_s21_tan
double db = -174.532925199433;
ck_assert_double_eq_tol(s21_tan(db), tan(db),1e-06);

#test test_16_s21_tan
double db = S21_PI / 2;
ck_assert_double_eq_tol(s21_tan(db), tan(db), 1e-06);

#test test_16_s21_tan_3pi2
double db = 3 * S21_PI / 2;
ck_assert_double_eq_tol(s21_tan(db), tan(db), 1e-06);

#test test_16_s21_tan_minus_3pi2
double db = 3 * (-1) * S21_PI / 2;
ck_assert_double_eq_tol(s21_tan(db), tan(db), 1e-06);

#test test_16_s21_tan_5pi2
double db = S21_PI * 5 / 2;
ck_assert_double_eq_tol(s21_tan(db), tan(db), 1e-06);

#test test_16_s21_tan_minus_5pi2
double db = S21_PI * 5 * (-1) / 2;
ck_assert_double_eq_tol(s21_tan(db), tan(db), 1e-06);

#test test_17_s21_tan
double db = -S21_PI / 2;
ck_assert_double_eq_tol(s21_tan(db), tan(db), 1e-06);

#test test_18_s21_tan
double db = 0;
ck_assert_double_eq_tol(s21_tan(db), tan(db), 1e-06);

#test test_01_s21_sqrt
ck_assert_ldouble_infinite(s21_sqrt(S21_POSITIVE_INF));
ck_assert_ldouble_infinite(sqrt(S21_POSITIVE_INF));

#test test_02_s21_sqrt_neg_inf
double db = S21_NEGATIVE_INF;
ck_assert_ldouble_nan(s21_sqrt(db));
ck_assert_ldouble_nan(sqrt(db));

#test test_03_s21_sqrt
double db = -15;
ck_assert_ldouble_nan(s21_sqrt(db));
ck_assert_ldouble_nan(sqrt(db));

#test test_04_s21_sqrt
double db = 0.2342;
ck_assert_ldouble_eq_tol(s21_sqrt(db), sqrt(db), 1e-6);

#test test_05_s21_sqrt
double db = S21_NAN;
ck_assert_ldouble_nan(s21_sqrt(db));
ck_assert_ldouble_nan(sqrt(db));

#test test_06_s21_sqrt
double db = 1.0;
ck_assert_ldouble_eq_tol(s21_sqrt(db), sqrt(db), 1e-6);

#test test_07_s21_sqrt_zero
ck_assert_ldouble_eq_tol(s21_sqrt(0.0), sqrt(0.0), 1e-6);
ck_assert_ldouble_eq_tol(s21_sqrt(-0.0), sqrt(-0.0), 1e-6);

#test test_08_s21_sqrt
double db = 10e+32;
ck_assert_ldouble_eq_tol(s21_sqrt(db), sqrt(db), 1e-6);

#test test_09_s21_sqrt
double db = 1;
ck_assert_ldouble_eq_tol(s21_sqrt(db), sqrt(db), 1e-6);

#test test_10_s21_sqrt
double db = 100;
ck_assert_ldouble_eq_tol(s21_sqrt(db), sqrt(db), 1e-6);

#test test_11_sqrt
double db = 342423.4234;
ck_assert_ldouble_eq_tol(s21_sqrt(db), sqrt(db), 1e-6);

#test test_12_sqrt
double db = 981.123e-15;
ck_assert_ldouble_eq_tol(s21_sqrt(db), sqrt(db), 1e-6);

#test test_13_pi
double db = S21_PI * 5 / 2;
ck_assert_ldouble_eq_tol(s21_sqrt(db), sqrt(db), 1e-6);

#test acos_01
long double x = 0.7071067811865475244;
ck_assert_ldouble_eq_tol(acos(x), s21_acos(x), 1e-06);

#test acos_02_1_2
double x = 1.2;
ck_assert_ldouble_nan(acos(x));
ck_assert_ldouble_nan(s21_acos(x));

#test acos_03_zero
int ret = 0;
double x = -1.2;
long double res = acos(x), s21_res = s21_acos(x); 
if (is_nan(res) == is_nan(s21_res)) ret = 1;  
ck_assert_int_eq(1, ret);
ck_assert_ldouble_nan(acos(x));
ck_assert_ldouble_nan(s21_acos(x));

#test acos_04
double x = -0.12;
long double res = acos(x), s21_res = s21_acos(x);
ck_assert_double_eq_tol(s21_res, res, S21_EPS);

#test acos_05
double x = 0.43;
long double res = acos(x), s21_res = s21_acos(x);
ck_assert_double_eq_tol(s21_res, res, S21_EPS);

#test acos_06_1_point
long double x = 1.;
long double res = acos(x), s21_res = s21_acos(x);
ck_assert_ldouble_eq(res, s21_res);

#test acos_07_minus_1_point
long double x = -1.;
long double res = acos(x), s21_res = s21_acos(x);
ck_assert_ldouble_eq(res, s21_res);

#test acos_08
long double x = 0.00;
long double res = acos(x), s21_res = s21_acos(x);
ck_assert_ldouble_eq(res, s21_res);

#test acos_09
long double x = -0.7071067811865475244;
ck_assert_ldouble_eq(acos(x), s21_acos(x));

#test acos_10_pi
long double num = S21_PI;
ck_assert_ldouble_nan(s21_acos(num)); 
ck_assert_ldouble_nan(acos(num));

#test acos_10_pi_2
long double num = S21_PI / 2;
ck_assert_ldouble_nan(s21_acos(num)); 
ck_assert_ldouble_nan(acos(num));

#test acos_11_nan
long double num = S21_NAN;
ck_assert_ldouble_nan(s21_acos(num)); 
ck_assert_ldouble_nan(acos(num));

#test acos_12_inf
long double num = S21_POSITIVE_INF;
ck_assert_ldouble_nan(s21_acos(num)); 
ck_assert_ldouble_nan(acos(num));

#test acos_12__neg_inf
long double num = S21_NEGATIVE_INF;
ck_assert_ldouble_nan(s21_acos(num)); 
ck_assert_ldouble_nan(acos(num));

#test atan_01_pi
long double num = S21_PI;
ck_assert_ldouble_eq_tol(s21_atan(num), atan(num), 1e-06);

#test atan_02_pi_2
long double num = S21_PI / 2;
ck_assert_ldouble_eq_tol(s21_atan(num), atan(num), 1e-06);

#test atan_03_pi_zero
long double num = 0;
ck_assert_ldouble_eq_tol(s21_atan(num), atan(num), 1e-06);

#test atan_04_pi_minus_zero
long double num = -0.000;
ck_assert_ldouble_eq_tol(s21_atan(num), atan(num), 1e-06);

#test atan_1
long double num = 8.114755;
if (is_nan((double)(s21_atan(num)))) {
  ck_assert_int_eq((is_nan(atan(num)) != 0), 1);
} else {
  long double condition = (s21_atan(num) - atan(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test atan_2
long double num = 384.682105;
if (is_nan((double)(s21_atan(num)))) {
ck_assert_int_eq((is_nan(atan(num)) != 0), 1);
} else {
  long double condition = (s21_atan(num) - atan(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test atan_3
long double num = -647.867378;
if (is_nan((double)(s21_atan(num)))) {
  ck_assert_int_eq((is_nan(atan(num)) != 0), 1);
} else {
  long double condition = (s21_atan(num) - atan(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test atan_4
long double num = 0.5;
if (is_nan((double)(s21_atan(num)))) {
  ck_assert_int_eq((is_nan(atan(num)) != 0), 1);
} else {
  long double condition = (s21_atan(num) - atan(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test atan_5
long double num = -1;
if (is_nan((double)(s21_atan(num)))) {
  ck_assert_int_eq((is_nan(atan(num)) != 0), 1);
} else {
  long double condition = (s21_atan(num) - atan(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test atan_6
long double num = 1;
if (is_nan((double)(s21_atan(num)))) {
  ck_assert_int_eq((is_nan(atan(num)) != 0), 1);
} else {
  long double condition = (s21_atan(num) - atan(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test atan_7
long double num = 125.586760;
if (is_nan((double)(s21_atan(num)))) {
  ck_assert_int_eq((is_nan(atan(num)) != 0), 1);
} else {
  long double condition = (s21_atan(num) - atan(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test atan_8
long double num = 736.672348;
if (is_nan((double)(s21_atan(num)))) {
  ck_assert_int_eq((is_nan(atan(num)) != 0), 1);
} else {
  long double condition = (s21_atan(num) - atan(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test atan_9
long double num = -747.843463;
if (is_nan((double)(s21_atan(num)))) {
  ck_assert_int_eq((is_nan(atan(num)) != 0), 1);
} else {
  long double condition = (s21_atan(num) - atan(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test atan_10
long double num = 994.919772;
if (is_nan((double)(s21_atan(num)))) {
  ck_assert_int_eq((is_nan(atan(num)) != 0), 1);
} else {
  long double condition = (s21_atan(num) - atan(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test atan_nan
long double num = S21_NAN;
if (is_nan((double)(s21_atan(num)))) {
  ck_assert_int_eq((is_nan(atan(num)) != 0), 1);
} else {
  long double condition = (s21_atan(num) - atan(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test atan_inf
long double num = S21_POSITIVE_INF;
if (is_nan((double)(s21_atan(num)))) {
  ck_assert_int_eq((is_nan(atan(num)) != 0), 1);
} else if (is_inf((double)(s21_atan(num)))) {
  ck_assert_int_eq((is_inf(atan(num)) != 0), 1);
} else {
  long double condition = (s21_atan(num) - atan(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test atan_neg_inf
long double num = S21_NEGATIVE_INF;
if (is_nan((double)(s21_atan(num)))) {
  ck_assert_int_eq((is_nan(atan(num)) != 0), 1);
} else if (is_inf((double)(s21_atan(num)))) {
  ck_assert_int_eq((is_inf(atan(num)) != 0), 1);
} else {
  long double condition = (s21_atan(num) - atan(num));
  ck_assert_int_eq(((condition <= DIFF) && (condition >= -DIFF)), 1);
}

#test asin_01
double x = 0.55;
long double s21_res = s21_asin(x), res = asin(x);
ck_assert_double_eq_tol(s21_res, res, S21_EPS);

#test asin_02
double x = -0.98;
long double s21_res = s21_asin(x), res = asin(x);
ck_assert_double_eq_tol(s21_res, res, S21_EPS);

#test asin_03_minus_1
double x = -1;
long double s21_res = s21_asin(x), res = asin(x);
ck_assert_ldouble_eq(s21_res, res);

#test asin_04_1
double x = 1;
long double s21_res = s21_asin(x), res = asin(x);
ck_assert_ldouble_eq(s21_res, res);

#test asin_05_zero
double x = 0;
long double s21_res = s21_asin(x), res = asin(x);
ck_assert_ldouble_eq(s21_res, res);

#test asin_minus_05_zero_point
double x = -0.00;
long double s21_res = s21_asin(x), res = asin(x);
ck_assert_ldouble_eq(s21_res, res);

#test asin_06
double x = 0.7071067811865475244;
long double s21_res = s21_asin(x), res = asin(x);
ck_assert_double_eq_tol(s21_res, res, S21_EPS);

#test asin_07
double x = -0.7071067811865475244;
long double s21_res = s21_asin(x), res = asin(x);
ck_assert_double_eq_tol(s21_res, res, S21_EPS);

#test asin_07a
double x = -0.999999111999;
long double s21_res = s21_asin(x), res = asin(x);
ck_assert_double_eq_tol(s21_res, res, S21_EPS);

#test asin_08
int ret = 0;
double x = -1.1;
long double s21_res = s21_asin(x), res = asin(x);
if (is_nan(res) == is_nan(s21_res)) ret = 1;
ck_assert_int_eq(1, ret);

#test asin_09
double x = -333222333222.111;
ck_assert_double_nan(s21_asin(x));
ck_assert_double_nan(asin(x));

#test asin_10
double x = 1.1;
ck_assert_double_nan(s21_asin(x));
ck_assert_double_nan(asin(x));

#test asin_11_nan
double x = S21_NAN;
ck_assert_double_nan(s21_asin(x));
ck_assert_double_nan(asin(x));

#test asin_11_inf
double x = S21_POSITIVE_INF;
ck_assert_double_nan(s21_asin(x));
ck_assert_double_nan(asin(x));

#test asin_11_neg_inf
double x = S21_NEGATIVE_INF;
ck_assert_double_nan(s21_asin(x));
ck_assert_double_nan(asin(x));